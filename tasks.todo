

New User Creation (POST /api/users):
  ✔ Required Fields are present
  ✔ Fields are their anticipated type
    ✔ Strings: username, password, email
  ✔ Fields are within their size ranges
    ✔ username (min: 1)
    ✔ password (min: 10, max: 72)
  ☐ Unique fields are confirmed to be original
    ☐ username
    ☐ email (if present)

package.json:
  ☐ Add `description` field
  ☐ Add `repository` field

Client Site:
  ☐ email validation before new user registration
    const regex = /[0-9a-zA-Z!#$%&'"*/=.?^_+\-`{|}~]+@{1}[^@\s]+/;
    if( req.body.email && !req.body.email.match(regex) ) {
      return res.status(422).json({
        status: 422,
        errorType: "InvalidEmailAddress",
        message: "Error: the provided email address is not valid.",
        emailAddress: req.body.email
      });
    }
  ☐ Trimmed fields are warned if they would be effected
    ☐ username, email






// DOCUMENTATION

Todos:
  You can write plain text notes/descriptions wherever you want
  Done:
    ✔ Press Alt+D to mark a todo as done @done(19-01-06 15:45)
    ☐ Press it again to undo the action
  Cancelled:
    ✘ Press Alt+C to mark a todo as cancelled
    ☐ Press it again to undo the action
  Tagging:
    ☐ You can add tags using the @ symbol, like this @tag
    ☐ There are some special, customizable tags: @critical @high @low @today

Formatting:
  You can format text in a markdown-like fashion
  Bold:
    ☐ Use asterisks for *bold*
  Italic:
    ☐ Use underscores for _italic_
  Strikethrough:
    ☐ Use tildes for ~strikethrough~
  Code:
    ☐ Use backticks for `code`